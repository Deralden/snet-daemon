syntax = "proto3";
package training;
//Please note that the AI developers need to provide a server implementation of the gprc server of this proto.
message ModelDetails {
  string model_id = 1;
  string method_name = 2;
  string description = 3;

}

message AuthorizationDetails {
  uint64 current_block = 1;
  //signature of the following message:
  //("__methodName", user_address, current_block_number)
  bytes signature = 2;
  string user_address = 3;
  int32 channel_id = 4;
}

enum Status {
  CREATED = 0;
  IN_PROGRESS = 1;
  ERROR =2;
  COMPLETED = 3;
  DELETED = 4;
}

message CreateModelRequest {
  repeated string address_list = 1;

  string training_data_link = 2;
  //This is to uniquely identify the method name against which the training request
  string method_name = 3;
  //Incase the AI consumer wishes to make this madel public
  bool is_publicly_accessible = 4;

  AuthorizationDetails authorization = 5;

  string model_description = 6;
}

message ModelDetailsRequest {
  ModelDetails model_details =1 ;
  AuthorizationDetails authorization = 2;
}


message UpdateModelRequest {
  repeated string addressList = 1;
  ModelDetails model_details = 2;
  Status status = 3;
  string message = 4;
  bytes signature = 5;
  //This should be in the list of address maintained against the model id
  string signed_address = 6;
  AuthorizationDetails authorization = 7;
  bool is_publicly_accessible = 8;
}


message ModelDetailsResponse {
  Status status = 1;
  ModelDetails model_details =2;
  string message = 3;
  repeated string address_list = 4;
  //Added the below two for more details
  string service_id = 6;
  string organization_id = 7;

}

service Model {

  // The AI developer needs to Implement this service and Daemon will call these
  // There will be no cost borne by the consumer in calling these methods,
  // Pricing will apply when you actually call the training methods defined.
  // AI consumer will call all these methods
  rpc create_model(CreateModelRequest) returns (ModelDetailsResponse) {}
  rpc update_model_access(UpdateModelRequest) returns (ModelDetailsResponse) {}
  rpc delete_model(UpdateModelRequest) returns (ModelDetailsResponse) {}
  rpc get_model_status(ModelDetailsRequest) returns (ModelDetailsResponse) {}


}
